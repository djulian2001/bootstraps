# bootstraps.lib
: '
library file bootstraps

Description:
	This is a script that takes in command line args and sets up an ansible 
	controller node.  Following the instructions from the ansible docs we will
	be using the pip install method.

	Why pip?
		Pip will have the latest core modules.
		The source code will not have been changed and module behavior should
			follow the docs
		Its very easy to do
		If down the road, ansible versions have to be coupled to deployments we
			can easily manage ansible versions using python module virtualenv 
			and the virtualenv wrapper 

Expected Results:
	The ansible tool will be installed.
	The deployment user (normally ansible) will be created on the control server
	The deployment user will be given sudo privileges on the control server 
		- file: /etc/sudoers
	The deployment user will be created on all of the remote hosts
	The deployment user will be given sudo privileges using the /etc/sudoers file
	The deployment

user scope:
	This script has to be run by a user with sudo privileges.
	The user has to have sudo privileges on the remote hosts.

bootstrap dependencies:
	sshpass
	epel

ansible dependencies:
	python-pip 
	python-devel 
	openssl-devel.x86_64

other dependencies:
	git


sources: 
http://docs.ansible.com/ansible/intro_installation.html#latest-releases-via-pip

'

source "$DIR/lib/app_functions.lib"

check_env()
{
	# check that these env variables are set first
	echo "${HISTCONTROL}"
	echo "${SSHPASS}"
	echo "${ANSIBLE_VAULT_PASSWORD_FILE}"
	contains "${HISTCONTROL}" "ignorespace"
	echo "$?"
	
	: "${SSHPASS:?Export SSHPASS with admin password, prepend with a space}"
	: "${ANSIBLE_VAULT_PASSWORD:?Export ANSIBLE_VAULT_PASSWORD deployer password, prepend with a space}"
	: "${ANSIBLE_VAULT_PASSWORD_FILE:?Export ANSIBLE_VAULT_PASSWORD_FILE with deployer password, source init.source}"
}

check_setup()
{
	echo "Checking Setup ....."
	check_env

	# check hosts file exists
	# check sudoers.d file exists
}

required_dependencies()
{
	echo "installing dependencies ...."
	check_setup
	# enable epel
	echo "installing with yum  ...."
	/bin/echo "${SSHPASS}" | sudo -S yum -y install epel-release
	/bin/echo "${SSHPASS}" | sudo -S yum --enablerepo=epel -y install epel-release
	/bin/echo "${SSHPASS}" | sudo -S yum install -y git sshpass
	if [[ "$?" -eq 0 ]]; then
		return 0
	else
		return 1
	fi
}


ansible_dependencies()
{

	TARGET_KEY="PasswordAuthentication"
	REPLACEMENT_VALUE="yes"
	CONFIG_FILE="/etc/ssh/sshd_config"
	TEST_CONFIG_SET="${TARGET_KEY} ${REPLACEMENT_VALUE}"

	# /usr/bin/grep '^PasswordAuthentication yes' "/etc/ssh/sshd_config" | grep -v grep

	/bin/echo "${SSHPASS}" | sudo -S /usr/bin/grep '^"${TEST_CONFIG_SET}"' "${CONFIG_FILE}" | grep -v grep
	if [[ ! "$?" -eq 0 ]] ; then
		/bin/echo "${SSHPASS}" | sudo -S sed --copy --in-place "s/\($TARGET_KEY * *\).*/\1$REPLACEMENT_VALUE/" $CONFIG_FILE 
		/bin/echo "${SSHPASS}" | sudo -S service sshd restart
	fi


	# setup and install ansible with pip..
	echo "INSTALL ansible using pip..."
	/bin/echo "${SSHPASS}" | sudo -S yum -y install python-pip python-devel openssl-devel.x86_64
	/bin/echo "${SSHPASS}" | sudo -S pip install --upgrade pip
	/bin/echo "${SSHPASS}" | sudo -S pip install ansible
	/bin/echo "${SSHPASS}" | sudo -S pip install --upgrade ansible
	
	/bin/echo "${ANSIBLE_VAULT_PASSWORD}" >> "${ANSIBLE_VAULT_PASSWORD_FILE}"
	/usr/bin/chmod 0440 "${ANSIBLE_VAULT_PASSWORD_FILE}"

	if [[ "$?" -eq 0 ]]; then
		return 0
	else
		return 1
	fi
}

add_hosts_to_known_hosts()
{
	# FUTURE TASK!!!
	echo "NEED TO ADD THIS!!!!"
	echo "hosts inventory need to be added to the known hosts to boot strap with?"
	echo "work around is add 'StrictHostKeyChecking no' to admins .ssh/config file"

}


env_instructions()
{

	/usr/bin/cat <<-EOF
		Usage Instructions:
		--	Run this script under an ADMIN account with sudo privileges on ALL hosts
		--	ALL Hosts must allow SSH connections with password
		-
		--	First source the init.source to set ${0} running enviornment 
		-		* appends HISTCONTROL enviornment variable to ignorespace
		-		* appends "StrictHostKeyChecking no" to ~/.ssh/config and sets file read only
		-		* export ANSIBLE_VAULT_PASSWORD_FILE="~/.secret.secret"
		-			.... password to decrypt ansible vault file in plain text
		-			.... create the file and add the decrypt pass phrase to it
		-
		--	Prepend ALL commands with sensitive information with a space character
		-
		--	Set the following enviornment variables:
		-		* export SSHPASS="...."
		-			.... ADMIN accounts password
		-		* export ANSIBLE_VAULT_PASSWORD="...."
		-			.... Used when a playbook is run to access secrets
		-		* PREPEND WITH A SPACE
		-
	EOF
	# echo "Error on line ${1}"
}

app_summary(){

	/usr/bin/cat <<-EOF
		${0} Tasks Summary:
		-
		--	Installed bootstrap dependencies as root
		-
		--	Installed Ansible Dependencies as root
		-	
		--	Ready to use Ansible to bootstrap the deployer:
		-
		--	Run the following commands:
		-	cd ansible_boot_ansible
		-	ansible-playbook -k -u "${USER}" booter.yaml
		-		* default user will be ansible

	EOF
}

